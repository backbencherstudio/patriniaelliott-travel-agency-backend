generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String    @id @default(cuid())
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  user_id             String
  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id                            String                      @id @default(cuid())
  created_at                    DateTime                    @default(now())
  updated_at                    DateTime                    @default(now())
  deleted_at                    DateTime?
  status                        Int?                        @default(1) @db.SmallInt
  approved_at                   DateTime?
  availability                  String?
  email                         String?                     @unique
  username                      String?                     @unique
  name                          String?                     @db.VarChar(255)
  first_name                    String?                     @db.VarChar(255)
  last_name                     String?                     @db.VarChar(255)
  password                      String?                     @db.VarChar(255)
  domain                        String?                     @unique
  avatar                        String?
  phone_number                  String?
  country                       String?
  state                         String?
  city                          String?
  address                       String?
  zip_code                      String?
  gender                        String?
  date_of_birth                 DateTime?                   @db.Date
  billing_id                    String?
  type                          String?                     @default("user")
  email_verified_at             DateTime?
  is_two_factor_enabled         Int?                        @default(0)
  two_factor_secret             String?
  apt_suite_unit                String?
  display_name                  String?                     @db.VarChar(255)
  nationality                   String?                     @db.VarChar(255)
  passport_expiry_date          DateTime?                   @db.Date
  passport_first_name           String?
  passport_issuing_country      String?
  passport_last_name            String?
  passport_number               String?
  street_address                String?
  VendorVerification            VendorVerification?
  accounts                      Account[]
  blog_comments                 BlogComment[]
  blogs                         Blog[]
  booking_coupons               BookingCoupon[]
  user_bookings                 Booking[]                   @relation("user")
  vendor_bookings               Booking[]                   @relation("vendor")
  user_checkouts                Checkout[]                  @relation("user")
  vendor_checkouts              Checkout[]                  @relation("vendor")
  creator_conversations         Conversation[]              @relation("creator")
  participant_conversations     Conversation[]              @relation("participant")
  destinations                  Destination[]
  email_logs                    EmailLog[]
  likes                         Like[]
  receiver_messages             Message[]                   @relation("receiver")
  sender_messages               Message[]                   @relation("sender")
  receiver_notifications        Notification[]              @relation("receiver")
  sender_notifications          Notification[]              @relation("sender")
  package_cancellation_policies PackageCancellationPolicy[]
  packages                      Package[]
  payment_transactions          PaymentTransaction[]
  reviews                       Review[]
  role_users                    RoleUser[]
  roles                         Role[]
  temp_redeems                  TempRedeem[]
  ucodes                        Ucode[]
  user_cards                    UserCard[]
  user_payment_methods          UserPaymentMethod[]
  user_settings                 UserSetting[]
  vendor_wallet                 VendorWallet?
  withdrawals                   Withdrawal[]
  user_documents                UserDocument[]

  @@map("users")
}

model UserDocument {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status    String? // pending, approved, rejected
  user_id   String?
  type      String?
  file_type String?
  file_path String?
  file_name String?
  user      User?   @relation(fields: [user_id], references: [id])

  @@map("user_documents")
}

model Ucode {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  status     Int?      @default(1) @db.SmallInt
  user_id    String?
  token      String?
  email      String?
  expired_at DateTime?
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("ucodes")
}

model Role {
  id               String           @id @default(cuid())
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  deleted_at       DateTime?
  status           Int?             @default(1) @db.SmallInt
  title            String?
  name             String?
  user_id          String?
  permission_roles PermissionRole[]
  role_users       RoleUser[]
  user             User?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id               String           @id @default(cuid())
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  deleted_at       DateTime?
  status           Int?             @default(1) @db.SmallInt
  title            String?
  action           String?
  subject          String?
  conditions       String?
  fields           String?
  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  permission_id String
  role_id       String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  role_id    String
  user_id    String
  role       Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

model NotificationEvent {
  id            String         @id @default(cuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now())
  deleted_at    DateTime?
  status        Int?           @default(1) @db.SmallInt
  type          String?
  text          String?
  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id                    String             @id @default(cuid())
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  deleted_at            DateTime?
  read_at               DateTime?
  status                Int?               @default(1) @db.SmallInt
  sender_id             String?
  receiver_id           String?
  notification_event_id String?
  entity_id             String?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])
  receiver              User?              @relation("receiver", fields: [receiver_id], references: [id])
  sender                User?              @relation("sender", fields: [sender_id], references: [id])

  @@map("notifications")
}

model UserPaymentMethod {
  id                String    @id @default(cuid())
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  deleted_at        DateTime?
  user_id           String?
  payment_method_id String?
  checkout_id       String?
  user              User?     @relation(fields: [user_id], references: [id])

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id               String    @id @default(cuid())
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now())
  deleted_at       DateTime?
  store_id         String?
  user_id          String?
  booking_id       String?
  order_id         String?
  type             String?   @default("order")
  withdraw_via     String?   @default("wallet")
  provider         String?
  reference_number String?
  status           String?   @default("pending")
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?
  booking          Booking?  @relation(fields: [booking_id], references: [id])
  user             User?     @relation(fields: [user_id], references: [id])

  @@map("payment_transactions")
}

model Message {
  id              String         @id @default(cuid())
  created_at      DateTime       @default(now())
  updated_at      DateTime       @default(now())
  deleted_at      DateTime?
  status          MessageStatus? @default(PENDING)
  sender_id       String?
  receiver_id     String?
  conversation_id String?
  attachment_id   String?
  message         String?
  attachment      Attachment?    @relation(fields: [attachment_id], references: [id])
  conversation    Conversation?  @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  receiver        User?          @relation("receiver", fields: [receiver_id], references: [id])
  sender          User?          @relation("sender", fields: [sender_id], references: [id])

  @@map("messages")
}

model Attachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  name       String?
  type       String?
  size       Int?
  file       String?
  file_alt   String?
  messages   Message[]

  @@map("attachments")
}

model Conversation {
  id             String    @id @default(cuid())
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  deleted_at     DateTime?
  creator_id     String?
  participant_id String?
  creator        User?     @relation("creator", fields: [creator_id], references: [id])
  participant    User?     @relation("participant", fields: [participant_id], references: [id])
  messages       Message[]

  @@map("conversations")
}

model Destination {
  id                   String               @id @default(cuid())
  created_at           DateTime             @default(now())
  updated_at           DateTime             @default(now())
  deleted_at           DateTime?
  status               Int?                 @default(1) @db.SmallInt
  approved_at          DateTime?
  user_id              String?
  name                 String?
  description          String?
  country_id           String?
  destination_images   DestinationImage[]
  country              Country?             @relation(fields: [country_id], references: [id])
  user                 User?                @relation(fields: [user_id], references: [id])
  package_destinations PackageDestination[]

  @@map("destinations")
}

model DestinationImage {
  id             String       @id @default(cuid())
  created_at     DateTime     @default(now())
  updated_at     DateTime     @default(now())
  deleted_at     DateTime?
  status         Int?         @default(1) @db.SmallInt
  sort_order     Int?         @default(0)
  destination_id String?
  image          String?
  image_alt      String?
  destination    Destination? @relation(fields: [destination_id], references: [id], onDelete: Cascade)

  @@map("destination_images")
}

model Package {
  id                     String    @id @default(cuid())
  created_at             DateTime  @default(now())
  updated_at             DateTime  @default(now())
  deleted_at             DateTime?
  status                 Int?      @default(1) @db.SmallInt
  approved_at            DateTime?
  user_id                String?
  name                   String
  description            String
  price                  Decimal
  duration               Int?
  duration_type          String?
  min_capacity           Int?      @default(1)
  max_capacity           Int?      @default(1)
  type                   String?   @default("tour")
  cancellation_policy_id String?
  address                String?
  amenities              Json?
  bathrooms              Int?
  bedrooms               Int?
  beds                   Json?
  booking_method         String?   @default("instant")
  breakfast_available    Boolean?  @default(false)
  check_in               Json?
  check_out              Json?
  city                   String?
  commission_rate        Decimal?  @default(15.0)
  country                String?
  host_earnings          Decimal?
  house_rules            Json?
  latitude               Float?
  longitude              Float?
  max_guests             Int?
  parking                Json?
  postal_code            String?
  rate_plans             Json?
  size_sqm               Float?
  unit_number            String?
  non_refundable_days    Json?

  package_availabilities  PackageAvailability[]
  booking_items           BookingItem[]
  checkout_extraServices  CheckoutExtraService[]
  checkout_items          CheckoutItem[]
  package_categories      PackageCategory[]
  package_destinations    PackageDestination[]
  package_extra_services  PackageExtraService[]
  package_files           PackageFile[]
  package_languages       PackageLanguage[]
  package_room_types      PackageRoomType[]
  package_tags            PackageTag[]
  package_traveller_types PackageTravellerType[]
  package_trip_plans      PackageTripPlan[]
  cancellation_policy     PackageCancellationPolicy? @relation(fields: [cancellation_policy_id], references: [id])
  user                    User?                      @relation(fields: [user_id], references: [id])
  property_calendars      PropertyCalendar[]
  reviews                 Review[]

  @@map("packages")
}

model TravellerType {
  id                      String                 @id @default(cuid())
  created_at              DateTime               @default(now())
  updated_at              DateTime               @default(now())
  deleted_at              DateTime?
  status                  Int?                   @default(1) @db.SmallInt
  type                    String?
  package_traveller_types PackageTravellerType[]

  @@map("traveller_types")
}

model PackageTravellerType {
  created_at        DateTime      @default(now())
  updated_at        DateTime      @default(now())
  package_id        String
  traveller_type_id String
  type              String?       @default("not_allowed")
  package           Package       @relation(fields: [package_id], references: [id], onDelete: Cascade)
  traveller_type    TravellerType @relation(fields: [traveller_type_id], references: [id], onDelete: Cascade)

  @@id([package_id, traveller_type_id])
  @@map("package_traveller_types")
}

model PackageLanguage {
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  package_id  String
  language_id String
  language    Language @relation(fields: [language_id], references: [id], onDelete: Cascade)
  package     Package  @relation(fields: [package_id], references: [id], onDelete: Cascade)

  @@id([package_id, language_id])
  @@map("package_languages")
}

model PackageDestination {
  created_at     DateTime    @default(now())
  updated_at     DateTime    @default(now())
  package_id     String
  destination_id String
  destination    Destination @relation(fields: [destination_id], references: [id], onDelete: Cascade)
  package        Package     @relation(fields: [package_id], references: [id], onDelete: Cascade)

  @@id([package_id, destination_id])
  @@map("package_destinations")
}

model Category {
  id                 String            @id @default(cuid())
  created_at         DateTime          @default(now())
  updated_at         DateTime          @default(now())
  deleted_at         DateTime?
  status             Int?              @default(1) @db.SmallInt
  sort_order         Int?              @default(0)
  name               String?
  parent_id          String?
  package_categories PackageCategory[]

  @@map("categories")
}

model PackageCategory {
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  package_id  String
  category_id String
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  package     Package  @relation(fields: [package_id], references: [id], onDelete: Cascade)

  @@id([package_id, category_id])
  @@map("package_categories")
}

model Tag {
  id           String       @id @default(cuid())
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now())
  deleted_at   DateTime?
  status       Int?         @default(1) @db.SmallInt
  sort_order   Int?         @default(0)
  name         String?
  package_tags PackageTag[]

  @@map("tags")
}

model PackageTag {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  package_id String
  tag_id     String
  type       String?
  package    Package  @relation(fields: [package_id], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([package_id, tag_id])
  @@map("package_tags")
}

model PackageTripPlan {
  id                       String                 @id @default(cuid())
  created_at               DateTime               @default(now())
  updated_at               DateTime               @default(now())
  deleted_at               DateTime?
  status                   Int?                   @default(1) @db.SmallInt
  sort_order               Int?                   @default(0)
  package_id               String?
  title                    String?
  description              String?
  package_trip_plan_images PackageTripPlanImage[]
  package                  Package?               @relation(fields: [package_id], references: [id], onDelete: Cascade)

  @@map("package_trip_plans")
}

model PackageTripPlanImage {
  id                   String           @id @default(cuid())
  created_at           DateTime         @default(now())
  updated_at           DateTime         @default(now())
  deleted_at           DateTime?
  status               Int?             @default(1) @db.SmallInt
  sort_order           Int?             @default(0)
  package_trip_plan_id String?
  image                String?
  image_alt            String?
  package_trip_plan    PackageTripPlan? @relation(fields: [package_trip_plan_id], references: [id], onDelete: Cascade)

  @@map("package_trip_plan_images")
}

model PackageCancellationPolicy {
  id          String    @id @default(cuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  status      Int?      @default(1) @db.SmallInt
  user_id     String?
  policy      String?
  description String?
  user        User?     @relation(fields: [user_id], references: [id])
  packages    Package[]

  @@map("package_cancellation_policies")
}

model PackageFile {
  id          String    @id @default(cuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  status      Int?      @default(1) @db.SmallInt
  sort_order  Int?      @default(0)
  package_id  String?
  file        String?
  file_alt    String?
  type        String?
  is_featured Boolean?  @default(false)
  package     Package?  @relation(fields: [package_id], references: [id], onDelete: Cascade)

  @@map("package_files")
}

model ExtraService {
  id                      String                 @id @default(cuid())
  created_at              DateTime               @default(now())
  updated_at              DateTime               @default(now())
  deleted_at              DateTime?
  name                    String?
  description             String?
  price                   Decimal?
  booking_extra_services  BookingExtraService[]
  checkout_extra_services CheckoutExtraService[]
  package_extra_services  PackageExtraService[]

  @@map("extra_services")
}

model PackageExtraService {
  id               String        @id @default(cuid())
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now())
  deleted_at       DateTime?
  package_id       String?
  extra_service_id String?
  extra_service    ExtraService? @relation(fields: [extra_service_id], references: [id])
  package          Package?      @relation(fields: [package_id], references: [id])

  @@map("package_extra_services")
}

model Checkout {
  id                      String                 @id @default(cuid())
  created_at              DateTime               @default(now())
  updated_at              DateTime               @default(now())
  deleted_at              DateTime?
  status                  Int?                   @default(1) @db.SmallInt
  user_id                 String?
  vendor_id               String?
  first_name              String?
  last_name               String?
  email                   String?
  phone_number            String?
  address1                String?
  address2                String?
  city                    String?
  state                   String?
  zip_code                String?
  country                 String?
  checkout_extra_services CheckoutExtraService[]
  checkout_items          CheckoutItem[]
  checkout_travellers     CheckoutTraveller[]
  user                    User?                  @relation("user", fields: [user_id], references: [id], onDelete: Cascade)
  vendor                  User?                  @relation("vendor", fields: [vendor_id], references: [id], onDelete: Cascade)
  temp_redeems            TempRedeem[]

  @@map("checkouts")
}

model CheckoutItem {
  id                String    @id @default(cuid())
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  deleted_at        DateTime?
  checkout_id       String?
  package_id        String?
  start_date        DateTime?
  end_date          DateTime?
  included_packages String?
  excluded_packages String?
  extra_services    String?
  checkout          Checkout? @relation(fields: [checkout_id], references: [id], onDelete: Cascade)
  package           Package?  @relation(fields: [package_id], references: [id], onDelete: Cascade)

  @@map("checkout_items")
}

model CheckoutTraveller {
  id           String    @id @default(cuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?
  checkout_id  String?
  type         String?   @default("adult")
  gender       String?
  full_name    String?
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  address1     String?
  address2     String?
  city         String?
  state        String?
  zip_code     String?
  country      String?
  checkout     Checkout? @relation(fields: [checkout_id], references: [id], onDelete: Cascade)

  @@map("checkout_travellers")
}

model CheckoutExtraService {
  id               String        @id @default(cuid())
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now())
  deleted_at       DateTime?
  checkout_id      String?
  package_id       String?
  extra_service_id String?
  checkout         Checkout?     @relation(fields: [checkout_id], references: [id], onDelete: Cascade)
  extra_service    ExtraService? @relation(fields: [extra_service_id], references: [id], onDelete: Cascade)
  package          Package?      @relation(fields: [package_id], references: [id], onDelete: Cascade)

  @@map("checkout_extra_services")
}

model TempRedeem {
  id          String    @id @default(cuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  user_id     String?
  coupon_id   String?
  checkout_id String?
  checkout    Checkout? @relation(fields: [checkout_id], references: [id], onDelete: Cascade)
  coupon      Coupon?   @relation(fields: [coupon_id], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("temp_redeems")
}

model Booking {
  id                           String                @id @default(cuid())
  created_at                   DateTime              @default(now())
  updated_at                   DateTime              @default(now())
  deleted_at                   DateTime?
  invoice_number               String?               @unique
  approved_at                  DateTime?
  status                       String?               @default("pending")
  type                         String?               @default("tour")
  user_id                      String?
  vendor_id                    String?
  booking_date_time            DateTime?
  total_amount                 Decimal?
  payment_status               String?
  payment_raw_status           String?
  paid_amount                  Decimal?
  paid_currency                String?
  payment_provider             String?
  payment_reference_number     String?
  payment_provider_charge_type String?               @default("percentage")
  payment_provider_charge      Decimal?
  first_name                   String?
  last_name                    String?
  email                        String?
  phone_number                 String?
  address1                     String?
  address2                     String?
  city                         String?
  state                        String?
  zip_code                     String?
  country                      String?
  comments                     String?
  booking_coupons              BookingCoupon[]
  booking_extra_services       BookingExtraService[]
  booking_items                BookingItem[]
  booking_travellers           BookingTraveller[]
  user                         User?                 @relation("user", fields: [user_id], references: [id])
  vendor                       User?                 @relation("vendor", fields: [vendor_id], references: [id])
  payment_transactions         PaymentTransaction[]
  reviews                      Review[]

  @@map("bookings")
}

model BookingItem {
  id                String           @id @default(cuid())
  created_at        DateTime         @default(now())
  updated_at        DateTime         @default(now())
  deleted_at        DateTime?
  booking_id        String?
  package_id        String?
  start_date        DateTime?
  end_date          DateTime?
  quantity          Int?             @default(1)
  price             Decimal?
  packageRoomTypeId String?
  booking           Booking?         @relation(fields: [booking_id], references: [id])
  PackageRoomType   PackageRoomType? @relation(fields: [packageRoomTypeId], references: [id])
  package           Package?         @relation(fields: [package_id], references: [id])

  @@map("booking_items")
}

model BookingTraveller {
  id           String    @id @default(cuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?
  booking_id   String?
  type         String?   @default("adult")
  gender       String?
  full_name    String?
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  address1     String?
  address2     String?
  city         String?
  state        String?
  zip_code     String?
  country      String?
  booking      Booking?  @relation(fields: [booking_id], references: [id])

  @@map("booking_travellers")
}

model BookingExtraService {
  id               String        @id @default(cuid())
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now())
  deleted_at       DateTime?
  booking_id       String?
  extra_service_id String?
  price            Decimal?
  booking          Booking?      @relation(fields: [booking_id], references: [id])
  extra_service    ExtraService? @relation(fields: [extra_service_id], references: [id])

  @@map("booking_extra_services")
}

model BookingCoupon {
  id          String    @id @default(cuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  user_id     String?
  booking_id  String?
  coupon_id   String?
  method      String?   @default("code")
  code        String?
  amount_type String?   @default("percentage")
  amount      Decimal?
  booking     Booking?  @relation(fields: [booking_id], references: [id])
  coupon      Coupon?   @relation(fields: [coupon_id], references: [id])
  user        User?     @relation(fields: [user_id], references: [id])

  @@map("booking_coupons")
}

model Coupon {
  id                String          @id @default(cuid())
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())
  deleted_at        DateTime?
  status            Int?            @default(1) @db.SmallInt
  method            String?         @default("code")
  code              String?
  name              String?
  description       String?
  amount_type       String?         @default("percentage")
  amount            Decimal?
  uses              Int?            @default(0)
  max_uses          Int?            @default(1)
  max_uses_per_user Int?            @default(1)
  coupon_type       String?         @default("order")
  coupon_ids        String?
  starts_at         DateTime?
  expires_at        DateTime?
  min_type          String?         @default("none")
  min_amount        Decimal?
  min_quantity      Int?
  booking_coupons   BookingCoupon[]
  temp_redeems      TempRedeem[]

  @@map("coupons")
}

model Blog {
  id            String        @id @default(cuid())
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  deleted_at    DateTime?
  status        Int?          @default(1) @db.SmallInt
  approved_at   DateTime?
  user_id       String?
  title         String?
  description   String?
  body          String?
  read_time     Int?          @default(0)
  like_count    Int?          @default(0)
  blog_comments BlogComment[]
  blog_images   BlogImage[]
  user          User?         @relation(fields: [user_id], references: [id])

  @@map("blogs")
}

model BlogImage {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  blog_id    String?
  image      String?
  image_alt  String?
  blog       Blog?     @relation(fields: [blog_id], references: [id])

  @@map("blog_images")
}

model BlogComment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  blog_id    String?
  user_id    String?
  comment    String?
  blog       Blog?     @relation(fields: [blog_id], references: [id])
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("blog_comments")
}

model Like {
  id            String    @id @default(cuid())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  deleted_at    DateTime?
  user_id       String?
  likeable_type String?
  likeable_id   String?
  user          User?     @relation(fields: [user_id], references: [id])

  @@map("likes")
}

model Review {
  id           String    @id @default(cuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?
  status       Int?      @default(1) @db.SmallInt
  user_id      String?
  booking_id   String?
  package_id   String?
  rating_value Float?
  comment      String?
  booking      Booking?  @relation(fields: [booking_id], references: [id])
  package      Package?  @relation(fields: [package_id], references: [id], onDelete: Cascade)
  user         User?     @relation(fields: [user_id], references: [id])

  @@map("reviews")
}

model Country {
  id           String        @id @default(cuid())
  created_at   DateTime      @default(now())
  updated_at   DateTime      @default(now())
  deleted_at   DateTime?
  status       Int?          @default(1) @db.SmallInt
  flag         String?
  name         String?
  country_code String?
  dial_code    String?
  destinations Destination[]
  taxes        Tax[]

  @@map("countries")
}

model Language {
  id                String            @id @default(cuid())
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now())
  deleted_at        DateTime?
  status            Int?              @default(1) @db.SmallInt
  name              String?
  code              String?
  package_languages PackageLanguage[]

  @@map("languages")
}

model EmailTemplate {
  id         String     @id @default(cuid())
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  deleted_at DateTime?
  key        String?
  subject    String?
  body       String?
  language   String?
  email_logs EmailLog[]

  @@map("email_templates")
}

model EmailLog {
  id                String         @id @default(cuid())
  created_at        DateTime       @default(now())
  updated_at        DateTime       @default(now())
  deleted_at        DateTime?
  user_id           String?
  email_template_id String?
  subject           String?
  body              String?
  to                String?
  cc                String?
  bcc               String?
  status            String?
  email_template    EmailTemplate? @relation(fields: [email_template_id], references: [id])
  user              User?          @relation(fields: [user_id], references: [id])

  @@map("email_logs")
}

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id           String    @id @default(cuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id                  String    @id @default(cuid())
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  deleted_at          DateTime?
  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id            String        @id @default(cuid())
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  deleted_at    DateTime?
  category      String?
  label         String?
  description   String?
  key           String?       @unique
  default_value String?
  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  user_id    String?
  setting_id String?
  value      String?
  setting    Setting?  @relation(fields: [setting_id], references: [id])
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("user_settings")
}

model VendorVerification {
  id                     String    @id @default(cuid())
  user_id                String    @unique
  first_name             String
  phone_number           String
  business_website       String?
  vendor_type            String?
  TIN                    String?
  property_name          String?
  address                String?
  unit_number            String?
  postal_code            String?
  city                   String?
  country                String?
  owner_type             String?
  owner_first_name       String?
  owner_last_name        String?
  owner_phone_numbers    String?
  owner_alt_names        String?
  manager_name           String?
  is_govt_representation Boolean?
  payment_method         String?
  payment_email          String?
  payment_account_name   String?
  payment_TIN            String?
  billing_address        String?
  status                 String?   @default("pending")
  step                   Int?
  rejection_reason       String?
  verified_at            DateTime?
  created_at             DateTime  @default(now())
  updated_at             DateTime  @default(now())
  user                   User      @relation(fields: [user_id], references: [id])
}

model PackageAvailability {
  id           String   @id @default(cuid())
  package_id   String
  date         DateTime
  status       String
  rates        Json?
  restrictions Json?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  package      Package  @relation(fields: [package_id], references: [id], onDelete: Cascade)
}

model PackageRoomType {
  id                 String             @id @default(cuid())
  package_id         String
  name               String
  description        String?
  bedrooms           Int?
  bathrooms          Int?
  max_guests         Int?
  size_sqm           Float?
  beds               Json?
  price              Decimal
  currency           String?            @default("USD")
  is_default         Boolean            @default(false)
  is_available       Boolean            @default(true)
  room_photos        Json?
  created_at         DateTime           @default(now())
  updated_at         DateTime           @default(now())
  deleted_at         DateTime?
  booking_items      BookingItem[]
  package            Package            @relation(fields: [package_id], references: [id], onDelete: Cascade)
  property_calendars PropertyCalendar[]

  @@map("package_room_types")
}

model Withdrawal {
  id               String    @id @default(cuid())
  user_id          String
  amount           Decimal
  currency         String    @default("USD")
  status           String    @default("pending")
  method           String
  account_details  Json?
  approved_at      DateTime?
  rejected_at      DateTime?
  rejection_reason String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now())
  user             User      @relation(fields: [user_id], references: [id])

  @@map("withdrawals")
}

model VendorWallet {
  id                String   @id @default(cuid())
  user_id           String   @unique
  balance           Decimal  @default(0)
  currency          String   @default("USD")
  total_earnings    Decimal  @default(0)
  total_withdrawals Decimal  @default(0)
  total_refunds     Decimal  @default(0)
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
  user              User     @relation(fields: [user_id], references: [id])

  @@map("vendor_wallets")
}

model PropertyCalendar {
  id           String           @id @default(cuid())
  package_id   String
  date         DateTime
  status       String
  reason       String?
  room_type_id String?
  created_at   DateTime         @default(now())
  updated_at   DateTime         @default(now())
  package      Package          @relation(fields: [package_id], references: [id], onDelete: Cascade)
  room_type    PackageRoomType? @relation(fields: [room_type_id], references: [id])

  @@map("property_calendars")
}

model Currency {
  id            String   @id @default(cuid())
  code          String   @unique
  name          String
  symbol        String
  exchange_rate Decimal  @default(1)
  is_default    Boolean  @default(false)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())

  @@map("currencies")
}

model Tax {
  id         String   @id @default(cuid())
  name       String
  rate       Decimal
  country_id String?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  country    Country? @relation(fields: [country_id], references: [id])

  @@map("taxes")
}

model UserCard {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int? @default(1) @db.SmallInt

  // Relation to user 
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Card details (store securely / consider tokenization in production)
  card_number  String
  expiry_month Int
  expiry_year  Int
  cvv          String

  // Billing address snapshot (optional, so that historical records remain even if user updates their profile)
  billing_country        String?
  billing_street_address String?
  billing_apt_suite_unit String?
  billing_state          String?
  billing_city           String?
  billing_zip_code       String?

  @@map("user_cards")
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}
