generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  approved_at  DateTime?
  availability String?

  email      String? @unique
  username   String? @unique
  name       String? @db.VarChar(255)
  first_name String? @db.VarChar(255)
  last_name  String? @db.VarChar(255)
  display_name  String? @db.VarChar(255)
  nationality   String? @db.VarChar(255)
  password   String? @db.VarChar(255)
  domain     String? @unique
  avatar     String?

  phone_number  String?
  country       String?
  street_address String?
  state         String?
  apt_suite_unit String?
  city          String?
  address       String?
  zip_code      String?
  gender        String?
  date_of_birth DateTime? @db.Date

  passport_first_name String?
  passport_last_name String?
  passport_number String?
  passport_issuing_country String?
  passport_expiry_date DateTime? @db.Date

  // billing id. e.g. stripe customer id
  billing_id String?

  type              String?   @default("user")
  email_verified_at DateTime?

  is_two_factor_enabled Int?    @default(0)
  two_factor_secret     String? // secret key for two factor authentication

  accounts                  Account[]
  creator_conversations     Conversation[] @relation("creator")
  participant_conversations Conversation[] @relation("participant")
  receiver_messages         Message[]      @relation("receiver")
  sender_messages           Message[]      @relation("sender")
  receiver_notifications    Notification[] @relation("receiver")
  sender_notifications      Notification[] @relation("sender")

  user_payment_methods UserPaymentMethod[]
  user_settings        UserSetting[]
  ucodes               Ucode[]
  roles                Role[]
  role_users           RoleUser[]
  payment_transactions PaymentTransaction[]
  // Relation to store users' saved payment cards
  user_cards           UserCard[]

  reviews         Review[]
  blog_comments   BlogComment[]
  likes           Like[]
  email_logs      EmailLog[]
  destinations    Destination[]
  packages        Package[]
  blogs           Blog[]
  booking_coupons BookingCoupon[]
  user_bookings   Booking[]       @relation("user")
  vendor_bookings Booking[]       @relation("vendor")

  user_checkouts                Checkout[]                  @relation("user")
  vendor_checkouts              Checkout[]                  @relation("vendor")
  temp_redeems                  TempRedeem[]
  package_cancellation_policies PackageCancellationPolicy[]
  VendorVerification            VendorVerification?

  // NEW: Add these relation fields
  withdrawals   Withdrawal[]
  vendor_wallet VendorWallet?

  @@map("users")
}

model Ucode {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1) @db.SmallInt

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  token      String?
  email      String?
  expired_at DateTime?

  @@map("ucodes")
}

model Role {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  title  String?
  name   String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  permission_roles PermissionRole[]
  role_users       RoleUser[]
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  title      String?
  action     String?
  subject    String?
  conditions String?
  fields     String?

  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

// this table stores notification event
model NotificationEvent {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  type   String?
  text   String?

  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  read_at DateTime?

  status Int? @default(1) @db.SmallInt

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  notification_event_id String?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])

  entity_id String?

  @@map("notifications")
}

model UserPaymentMethod {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  payment_method_id String?
  checkout_id       String?

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  store_id String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  booking_id String?
  booking    Booking? @relation(fields: [booking_id], references: [id])

  order_id         String?
  type             String?  @default("order")
  withdraw_via     String?  @default("wallet")
  provider         String?
  reference_number String?
  status           String?  @default("pending")
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?

  @@map("payment_transactions")
}

// ---------Start Chat schema---------

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}

// message is used for conversation
model Message {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status MessageStatus? @default(PENDING)

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  conversation_id String?
  conversation    Conversation? @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  attachment_id String?
  attachment    Attachment? @relation(fields: [attachment_id], references: [id])

  message String?

  @@map("messages")
}

// this table stores attachment of message
model Attachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name     String?
  type     String?
  size     Int?
  file     String?
  file_alt String?

  messages Message[]

  @@map("attachments")
}

// this table stores conversation
model Conversation {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  creator_id String?
  creator    User?   @relation("creator", fields: [creator_id], references: [id])

  participant_id String?
  participant    User?   @relation("participant", fields: [participant_id], references: [id])

  messages Message[]

  @@map("conversations")
}

// ---------End Chat schema---------

// this table stores destination information
model Destination {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  approved_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  name        String? // e.g. "Paris"
  description String? @db.Text // e.g. "Paris is the capital of France"

  country_id String?
  country    Country? @relation(fields: [country_id], references: [id])

  destination_images   DestinationImage[]
  package_destinations PackageDestination[]

  @@map("destinations")
}

// this table stores distanation image
model DestinationImage {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)

  destination_id String?
  destination    Destination? @relation(fields: [destination_id], references: [id], onDelete: Cascade)

  image     String?
  image_alt String?

  @@map("destination_images")
}

// this table stores package information
model Package {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  approved_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  name          String
  description   String  @db.Text
  price         Decimal
  // e.g, 5 days, 4 nights
  duration      Int?
  duration_type String? // e.g. days, nights, hours

  // minimum capacity
  min_capacity Int? @default(1)
  // person max capacity
  max_capacity Int? @default(1)

  type String? @default("tour") // e.g. "tour", "apartment", "hotel"

  cancellation_policy_id String?
  cancellation_policy    PackageCancellationPolicy? @relation(fields: [cancellation_policy_id], references: [id])

  package_files           PackageFile[]
  reviews                 Review[]
  package_trip_plans      PackageTripPlan[]
  package_categories      PackageCategory[]
  package_tags            PackageTag[]
  booking_items           BookingItem[]
  package_extra_services  PackageExtraService[]
  checkout_items          CheckoutItem[]
  checkout_extraServices  CheckoutExtraService[]
  package_destinations    PackageDestination[]
  package_languages       PackageLanguage[]
  package_traveller_types PackageTravellerType[]
  package_availabilities  PackageAvailability[]
  package_room_types      PackageRoomType[] // Added for hotels and apartment buildings

  // NEW: Add this relation field
  property_calendars PropertyCalendar[]

  // Location fields
  country     String?
  city        String?
  address     String?
  unit_number String?
  postal_code String?
  latitude    Float?
  longitude   Float?

  // Property-specific fields
  bedrooms   Int?
  bathrooms  Int?
  max_guests Int?
  size_sqm   Float?
  beds       Json? // [{type: "queen", quantity: 1}, ...]

  // Amenities & features
  amenities           Json? // {general: [...], cooking: [...], ...}
  breakfast_available Boolean? @default(false)
  parking             Json? // {available: "paid", cost: 15.5, ...}
  house_rules         Json? // {smoking: false, pets: true, ...}

  // Check-in/out times
  check_in  Json? // {start: "15:00", end: "20:00"}
  check_out Json? // "11:00"

  // Booking & pricing
  booking_method  String?  @default("instant") // instant/request
  commission_rate Decimal? @default(15.0)
  host_earnings   Decimal?
  rate_plans      Json? // {standard: {...}, nonRefundable: {...}, ...}

  @@map("packages")
}

// this table stores type of people
model TravellerType {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  // traveller type
  // available values:
  // adult, child, infant
  type                    String?
  package_traveller_types PackageTravellerType[]

  @@map("traveller_types")
}

// this table stores package traveller-type relationship
model PackageTravellerType {
  // id         String    @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  package_id String
  package    Package? @relation(fields: [package_id], references: [id], onDelete: Cascade)

  traveller_type_id String
  traveller_type    TravellerType? @relation(fields: [traveller_type_id], references: [id], onDelete: Cascade)

  type String? @default("not_allowed") // allowed, not_allowed

  @@id([package_id, traveller_type_id])
  @@map("package_traveller_types")
}

// this table stores package language relationship
model PackageLanguage {
  // id         String    @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  package_id String
  package    Package? @relation(fields: [package_id], references: [id], onDelete: Cascade)

  language_id String
  language    Language? @relation(fields: [language_id], references: [id], onDelete: Cascade)

  @@id([package_id, language_id])
  @@map("package_languages")
}

// this table stores package destination relationship
model PackageDestination {
  // id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  package_id String
  package    Package? @relation(fields: [package_id], references: [id], onDelete: Cascade)

  destination_id String
  destination    Destination? @relation(fields: [destination_id], references: [id], onDelete: Cascade)

  @@id([package_id, destination_id])
  @@map("package_destinations")
}

// this table stores category
model Category {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)

  name      String?
  parent_id String?

  package_categories PackageCategory[]

  @@map("categories")
}

// this table stores package and category relationship
model PackageCategory {
  // id         String    @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  package_id String
  package    Package? @relation(fields: [package_id], references: [id], onDelete: Cascade)

  category_id String
  category    Category? @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([package_id, category_id])
  @@map("package_categories")
}

// this table stores tag information (included, excluded lists)
model Tag {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)

  name         String?
  package_tags PackageTag[]

  @@map("tags")
}

// this table stores package and tag relationship
model PackageTag {
  // id         String    @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  package_id String
  package    Package? @relation(fields: [package_id], references: [id], onDelete: Cascade)

  tag_id String
  tag    Tag?   @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  type String? // included, excluded

  @@id([package_id, tag_id])
  @@map("package_tags")
}

// this table stores package trip plan
model PackageTripPlan {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)

  package_id String?
  package    Package? @relation(fields: [package_id], references: [id], onDelete: Cascade)

  // trip plan title
  title       String?
  // trip plan description
  description String? @db.Text

  package_trip_plan_images PackageTripPlanImage[]

  @@map("package_trip_plans")
}

// this table stores package trip plan image
model PackageTripPlanImage {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)

  package_trip_plan_id String?
  package_trip_plan    PackageTripPlan? @relation(fields: [package_trip_plan_id], references: [id], onDelete: Cascade)

  image     String?
  image_alt String?

  @@map("package_trip_plan_images")
}

// this table stores package cancellation policy
model PackageCancellationPolicy {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  // cancellation policy
  // available values:
  // free_cancellation, non_refundable
  policy String?

  // cancellation policy description
  description String?   @db.Text
  packages    Package[]

  @@map("package_cancellation_policies")
}

// this table stores package images, videos
model PackageFile {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)

  package_id String?
  package    Package? @relation(fields: [package_id], references: [id], onDelete: Cascade)

  file     String?
  file_alt String?

  // metadata
  type        String? // e.g. image, video
  is_featured Boolean? @default(false)

  @@map("package_files")
}

// this table stores extra service information
model ExtraService {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name        String?
  description String?  @db.Text
  price       Decimal?

  package_extra_services  PackageExtraService[]
  booking_extra_services  BookingExtraService[]
  checkout_extra_services CheckoutExtraService[]

  @@map("extra_services")
}

// this table stores package extra service
model PackageExtraService {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  package_id String?
  package    Package? @relation(fields: [package_id], references: [id])

  extra_service_id String?
  extra_service    ExtraService? @relation(fields: [extra_service_id], references: [id])

  @@map("package_extra_services")
}

// -----------------checkout-----------------
// this table stores checkout information
model Checkout {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  user_id String?
  user    User?   @relation("user", fields: [user_id], references: [id], onDelete: Cascade)

  vendor_id String?
  vendor    User?   @relation("vendor", fields: [vendor_id], references: [id], onDelete: Cascade)

  // hardcoded contact information
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?

  address1                String?
  address2                String?
  city                    String?
  state                   String?
  zip_code                String?
  country                 String?
  checkout_items          CheckoutItem[]
  temp_redeems            TempRedeem[]
  checkout_travellers     CheckoutTraveller[]
  checkout_extra_services CheckoutExtraService[]

  @@map("checkouts")
}

model CheckoutItem {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  checkout_id String?
  checkout    Checkout? @relation(fields: [checkout_id], references: [id], onDelete: Cascade)

  package_id String?
  package    Package? @relation(fields: [package_id], references: [id], onDelete: Cascade)

  start_date DateTime?
  end_date   DateTime?

  included_packages String? @db.Text
  excluded_packages String? @db.Text
  extra_services    String? @db.Text

  @@map("checkout_items")
}

// this table stores checkout traveller information
model CheckoutTraveller {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  checkout_id String?
  checkout    Checkout? @relation(fields: [checkout_id], references: [id], onDelete: Cascade)

  // traveller type
  // available values:
  // adult, child, infant
  type String? @default("adult")

  // traveller gender
  // available values:
  // male, female, other
  gender    String?
  full_name String?

  // extra fields
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?

  address1 String?
  address2 String?
  city     String?
  state    String?
  zip_code String?
  country  String?

  @@map("checkout_travellers")
}

// this table stores checkout extra service
model CheckoutExtraService {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  checkout_id String?
  checkout    Checkout? @relation(fields: [checkout_id], references: [id], onDelete: Cascade)

  package_id String?
  package    Package? @relation(fields: [package_id], references: [id], onDelete: Cascade)

  extra_service_id String?
  extra_service    ExtraService? @relation(fields: [extra_service_id], references: [id], onDelete: Cascade)

  @@map("checkout_extra_services")
}

// this table stores coupon temporary for checkout schema
model TempRedeem {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  coupon_id String?
  coupon    Coupon? @relation(fields: [coupon_id], references: [id], onDelete: Cascade)

  checkout_id String?
  checkout    Checkout? @relation(fields: [checkout_id], references: [id], onDelete: Cascade)

  @@map("temp_redeems")
}

// -----------------end  checkout-----------------

// this table stores booking information
model Booking {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  invoice_number String? @unique

  approved_at DateTime?
  // booking status
  // available values:
  // pending, processing, paused, confirmed, cancelled
  status      String?   @default("pending")

  // booking type
  // available values:
  // tour, cruise
  type String? @default("tour")

  user_id String?
  user    User?   @relation("user", fields: [user_id], references: [id])

  vendor_id String?
  vendor    User?   @relation("vendor", fields: [vendor_id], references: [id])

  booking_date_time DateTime?

  total_amount Decimal?

  // Payment information
  // e.g. pending, paid, failed
  payment_status           String?
  // raw information from payment provider
  // raw status from payment provider
  payment_raw_status       String?
  // paid amount from payment provider
  paid_amount              Decimal?
  // paid currency from payment provider
  paid_currency            String?
  // e.g. stripe, paypal, razorpay
  payment_provider         String?
  // e.g. stripe payment reference id
  payment_reference_number String?

  payment_provider_charge_type String?  @default("percentage") // e.g. fixed, percentage
  payment_provider_charge      Decimal? // e.g. stripe payment provider charge

  // hardcoded contact information
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?

  address1 String?
  address2 String?
  city     String?
  state    String?
  zip_code String?
  country  String?

  comments String? @db.Text

  booking_items          BookingItem[]
  booking_coupons        BookingCoupon[]
  payment_transactions   PaymentTransaction[]
  booking_travellers     BookingTraveller[]
  booking_extra_services BookingExtraService[]
  reviews                Review[]

  @@map("bookings")
}

// this table stores booking item information
model BookingItem {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  booking_id String?
  booking    Booking? @relation(fields: [booking_id], references: [id])

  package_id String?
  package    Package? @relation(fields: [package_id], references: [id])

  start_date DateTime?
  end_date   DateTime?

  quantity          Int?             @default(1)
  price             Decimal?
  PackageRoomType   PackageRoomType? @relation(fields: [packageRoomTypeId], references: [id])
  packageRoomTypeId String?

  @@map("booking_items")
}

// this table stores booking traveller information
model BookingTraveller {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  booking_id String?
  booking    Booking? @relation(fields: [booking_id], references: [id])

  // traveller type
  // available values:
  // adult, child, infant
  type String? @default("adult")

  // traveller gender
  // available values:
  // male, female, other
  gender    String?
  full_name String?

  // extra fields
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?

  address1 String?
  address2 String?
  city     String?
  state    String?
  zip_code String?
  country  String?

  @@map("booking_travellers")
}

// this table stores booking extra service
model BookingExtraService {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  booking_id String?
  booking    Booking? @relation(fields: [booking_id], references: [id])

  extra_service_id String?
  extra_service    ExtraService? @relation(fields: [extra_service_id], references: [id])

  price Decimal?

  @@map("booking_extra_services")
}

// this table stores booking coupons
model BookingCoupon {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  booking_id String?
  booking    Booking? @relation(fields: [booking_id], references: [id])

  coupon_id String?
  coupon    Coupon? @relation(fields: [coupon_id], references: [id])

  method      String?  @default("code") // code
  code        String?
  amount_type String?  @default("percentage") // percentage, fixed
  amount      Decimal?

  @@map("booking_coupons")
}

// this table stores coupon information
model Coupon {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  method String? @default("code") // code
  code   String?

  // the human readable coupon name
  name        String?
  // The description of the coupon - Not necessary 
  description String?  @db.Text
  // Whether or not the coupon is a percentage or a fixed price. 
  // values: percentage,fixed
  amount_type String?  @default("percentage")
  amount      Decimal?

  // The number of uses currently
  uses              Int? @default(0)
  // The max uses this coupon has (Total)
  max_uses          Int? @default(1)
  // How many times a user can use this coupon. (Total for single user)
  max_uses_per_user Int? @default(1)

  // Coupon discount on specific type of product
  // - Category wise = category -> get discount for categorize product
  // - Product wise = product -> get discount for specific product or package
  // - order wise = order -> get discount for order
  coupon_type String? @default("order") // category, product, order
  // If coupon_type filled with product or category
  // then it will be required
  // such as: category_id or product_id
  coupon_ids  String? @db.Text // format: [{id: id}]

  // When the coupon begins
  starts_at    DateTime? // e.g. 2025-01-01
  // When the coupon expires
  expires_at   DateTime? // e.g. 2025-01-01
  // Minimum purchase requirements
  // values: none, amount, quantity
  min_type     String?   @default("none")
  min_amount   Decimal?
  min_quantity Int?

  booking_coupons BookingCoupon[]
  temp_redeems    TempRedeem[]

  @@map("coupons")
}

// this table stores blog information
model Blog {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  approved_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  title       String?
  description String? @db.Text
  body        String? @db.Text

  read_time Int? @default(0) // in minutes

  // update according to like record count
  like_count Int? @default(0)

  blog_images   BlogImage[]
  blog_comments BlogComment[]

  @@map("blogs")
}

// this table stores blog image
model BlogImage {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)

  blog_id String?
  blog    Blog?   @relation(fields: [blog_id], references: [id])

  image     String?
  image_alt String?

  @@map("blog_images")
}

// this table stores blog comment
model BlogComment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  blog_id String?
  blog    Blog?   @relation(fields: [blog_id], references: [id])

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  comment String? @db.Text

  @@map("blog_comments")
}

// this table stores like information
model Like {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  // likeable_type
  // available values:
  // blog, blog_comment, review
  likeable_type String?

  // likeable_id
  // e.g. blog_id, blog_comment_id, review_id
  likeable_id String?

  @@map("likes")
}

// this table stores review
model Review {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  booking_id String?
  booking    Booking? @relation(fields: [booking_id], references: [id])

  package_id String?
  package    Package? @relation(fields: [package_id], references: [id], onDelete: Cascade)

  rating_value Float?
  comment      String? @db.Text

  @@map("reviews")
}

// this table stores countries list
model Country {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  // country flag image
  flag         String?
  // country name
  name         String? // e.g. "United States"
  country_code String? // e.g. "US"
  dial_code    String? // e.g. "+1"

  destinations Destination[]

  // NEW: Add this relation field
  taxes Tax[]

  @@map("countries")
}

// this table stores language list
model Language {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  // country name
  name String? // e.g. "English"
  code String? // e.g. "en"

  package_languages PackageLanguage[]

  @@map("languages")
}

// this table stores email template information
model EmailTemplate {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  key        String? // e.g. forgot_password, welcome_email
  subject    String? // email subject
  body       String?    @db.Text // email body
  language   String? // email language
  email_logs EmailLog[]

  @@map("email_templates")
}

// this table stores email log information
model EmailLog {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  email_template_id String?
  email_template    EmailTemplate? @relation(fields: [email_template_id], references: [id])

  subject String?
  body    String? @db.Text
  to      String?
  cc      String?
  bcc     String?
  status  String?

  @@map("email_logs")
}

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  category      String?
  label         String?
  description   String?
  key           String? @unique
  default_value String?

  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  setting_id String?
  setting    Setting? @relation(fields: [setting_id], references: [id])

  value String?

  @@map("user_settings")
}

// this table stores example
// model Note {
//   id                String  @id @default(cuid())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1) @db.SmallInt

//   title String?
//   body  String? @db.Text

//   tenant_id Int?
//   tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
//   @@map("posts")
// }

model VendorVerification {
  id      String @id @default(cuid())
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id])

  // Step 1: Profile Information
  first_name       String
  phone_number     String
  business_website String?
  vendor_type      String? // e.g. "individual", "company", etc.
  TIN              String? // Tax Identification Number

  // Step 2: Vendor Verification (Multi-step)
  // 2.1 Property Details
  property_name String? // Full name of accommodation
  address       String?
  unit_number   String?
  postal_code   String?
  city          String?
  country       String?

  // 2.2 Owner's Details
  owner_type          String? // "individual", "company", etc.
  owner_first_name    String?
  owner_last_name     String?
  owner_phone_numbers String? // JSON or comma-separated for multiple numbers
  owner_alt_names     String? // Alternative names, if any

  // 2.3 Manager's Details
  manager_name           String?
  is_govt_representation Boolean? // Is a government agency/official involved?

  // Step 3: Payment Method
  payment_method       String? // e.g. "paypal", "visa"
  payment_email        String?
  payment_account_name String?
  payment_TIN          String?
  billing_address      String?

  // Status & Progress
  status           String?   @default("pending") // pending, approved, rejected
  step             Int? // Current step in process (1, 2, 3, etc.)
  rejection_reason String?
  verified_at      DateTime?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now())
}

model PackageAvailability {
  id           String   @id @default(cuid())
  package_id   String
  package      Package  @relation(fields: [package_id], references: [id], onDelete: Cascade)
  date         DateTime
  status       String // open/closed/blocked
  rates        Json? // {standardRate: {...}, nonRefundableRate: {...}}
  restrictions Json? // {minStay: 1, maxStay: 30, closedToArrival: false, ...}
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
}

model PackageRoomType {
  id         String  @id @default(cuid())
  package_id String
  package    Package @relation(fields: [package_id], references: [id], onDelete: Cascade)

  name        String // "Standard Room", "Studio Apartment"
  description String? @db.Text

  // Room-specific details
  bedrooms   Int?
  bathrooms  Int?
  max_guests Int?
  size_sqm   Float?
  beds       Json? // [{type: "queen", quantity: 1}]

  // Pricing
  price    Decimal
  currency String? @default("USD")

  // Default room type for search results
  is_default Boolean @default(false)

  // Availability
  is_available Boolean @default(true)

  // Photos for this specific room type
  room_photos Json? // Array of photo URLs

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  // Relations
  booking_items BookingItem[]

  // NEW: Add this relation field
  property_calendars PropertyCalendar[]

  @@map("package_room_types")
}

model Withdrawal {
  id      String @id @default(cuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  amount   Decimal
  currency String  @default("USD")
  status   String  @default("pending") // pending, approved, rejected, completed
  method   String // paypal, bank_transfer, stripe

  // Payment details
  account_details Json? // {paypal_email: "...", bank_account: "..."}

  // Admin fields
  approved_at      DateTime?
  rejected_at      DateTime?
  rejection_reason String?

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("withdrawals")
}

model VendorWallet {
  id      String @id @default(cuid())
  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id])

  balance  Decimal @default(0)
  currency String  @default("USD")

  // Transaction history
  total_earnings    Decimal @default(0)
  total_withdrawals Decimal @default(0)
  total_refunds     Decimal @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("vendor_wallets")
}

model PropertyCalendar {
  id         String  @id @default(cuid())
  package_id String
  package    Package @relation(fields: [package_id], references: [id], onDelete: Cascade)

  date   DateTime
  status String // available, blocked, maintenance, booked
  reason String? // Why blocked (maintenance, holiday, etc.)

  // For room types
  room_type_id String?
  room_type    PackageRoomType? @relation(fields: [room_type_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("property_calendars")
}

model Currency {
  id            String  @id @default(cuid())
  code          String  @unique // USD, EUR, GBP
  name          String // US Dollar, Euro, British Pound
  symbol        String // $, €, £
  exchange_rate Decimal @default(1)
  is_default    Boolean @default(false)
  is_active     Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("currencies")
}

model Tax {
  id         String   @id @default(cuid())
  name       String // VAT, GST, Sales Tax
  rate       Decimal // 10.5 for 10.5%
  country_id String?
  country    Country? @relation(fields: [country_id], references: [id])
  is_active  Boolean  @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("taxes")
}

model UserCard {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  status Int? @default(1) @db.SmallInt

  // Relation to user
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Card details (store securely / consider tokenization in production)
  card_number   String
  expiry_month  Int
  expiry_year   Int
  cvv           String

  // Billing address snapshot (optional, so that historical records remain even if user updates their profile)
  billing_country        String?
  billing_street_address String?
  billing_apt_suite_unit String?
  billing_state          String?
  billing_city           String?
  billing_zip_code       String?

  @@map("user_cards")
}